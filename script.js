/**************
 * UTILIDADES *
 **************/
const $ = (sel) => document.querySelector(sel);
const $$ = (sel) => document.querySelectorAll(sel);
const clamp = (v, mi, ma) => Math.max(mi, Math.min(ma, v));
const rand = (a, b) => Math.floor(Math.random() * (b - a + 1)) + a;
const easeOutCubic = (t, b, c, d) => { t/=d; t--; return c*(t*t*t + 1) + b; };

const STORAGE_KEY = "hist_personagens_v1";

/****************
 * DADOS GRANDES *
 ****************/
// 50 ra√ßas
const RACAS = [
"Humano","Elfo da Floresta","Elfo Sombrio","An√£o","Orc","Goblin","Troll","Gigante","Fada","Ninfa",
"Sereiano","Drag√£o-humano","Dem√¥nio","Anjo","Vampiro","Lobisomem","Elemental de Fogo","Elemental de √Ågua","Elemental de Terra","Elemental de Ar",
"Golem","S√∫cubo/√çncubo","Meio-Drag√£o","Meio-Dem√¥nio","Meio-Anjo","Centauro","Minotauro","Kitsune","Tengu","Esp√≠rito Antigo",
"Fantasma","Zumbi Consciente","Planta-Humana","Ciborgue","Aut√¥mato","Alien√≠gena","S√∫cubo Drac√¥nico","F√™nix-Humana","Trit√£o do Abismo","Salamandra",
"Kraken√≠deo","Serpente-Humana","Licantropo Felino","Drag√£o Anci√£o","Arcanista √âlfico","Feyndar","Hom√∫nculo","Necromante Vivo","Esp√≠rito Guardi√£o","Ser Celestial"
];

// 50 poderes
const PODERES = [
"Manipula√ß√£o de Fogo","Manipula√ß√£o de √Ågua","Manipula√ß√£o de Terra","Manipula√ß√£o de Ar","Controle de Gelo","Controle de Raios","Telecinese","Telepatia","Controle de Sombras","Manipula√ß√£o de Luz",
"Invoca√ß√£o de Criaturas","Necromancia","Magia de Sangue","Transmuta√ß√£o","Magia de Cura","Cria√ß√£o de Portais","Ilusionismo","Invisibilidade","Manipula√ß√£o de Gravidade","Magia de Tempo",
"Explos√µes de Energia","Super For√ßa","Super Velocidade","Magia da Natureza","Controle de Metais","Controle de Veneno","Armas M√≠sticas Infinitas","Manipula√ß√£o de Ossos","Magia Musical","Controle de Emo√ß√µes",
"Aura de Medo","Magia de Cristais","Invoca√ß√£o de Armas","Magia de Runas","Energia Espiritual","Magia de Sonhos","Magia de Realidade","Regenera√ß√£o Avan√ßada","Magia de Caos","Controle de Som",
"Magia Celestial","Magia Infernal","Controle de Areia","F√∫ria Bestial","C√≥pia de Poderes","Barreira Absoluta","Armadura Viva","Magia Lunar","Magia Solar","Expans√£o de Dom√≠nio"
];

// 20 origens
const ORIGENS = [
"Vilarejo simples","Reino poderoso","Cidade capital","Ru√≠nas antigas","Floresta m√≠stica","Deserto amaldi√ßoado","Ilhas flutuantes","Submundo demon√≠aco","C√©u celestial","Outro planeta",
"Outro universo","Tribo b√°rbara","Academia m√°gica","Castelo ancestral","Montanhas congeladas","Vulc√£o ativo","Selva hostil","Cidade subterr√¢nea","Caverna cristalina","Laborat√≥rio secreto"
];

// 20 personalidades
const PERSONALIDADES = [
"Corajoso","Covarde","Gentil","Cruel","Sarc√°stico","Misterioso","S√°bio","Brincalh√£o","S√©rio","Impulsivo",
"Estrategista","Paciente","Agressivo","Carism√°tico","Sombrio","Protetor","Manipulador","Obcecado","Tranquilo","Louco"
];

// 15 motiva√ß√µes
const MOTIVACOES = [
"Vingan√ßa","Riqueza","Gl√≥ria","Sobreviv√™ncia","Amor","Justi√ßa","Poder absoluto","Explora√ß√£o","Paz mundial","Caos absoluto",
"Liberdade","Conhecimento","F√©","Heran√ßa familiar","Reden√ß√£o"
];

// 10 escalas
const ESCALA_PODER = ["Civil","Soldado","Elite","Mestre","Her√≥i","Lenda","Ancestral","Semideus","Divino","C√≥smico"];

// demais categorias
const ALTURAS = ["Baixo","M√©dio","Alto","Gigante","Colossal"];
const DURABILIDADES = ["Fr√°gil","Resistente","Muito resistente","Tanque","Quase indestrut√≠vel"];
const FORCAS = ["Muito fraco","Normal","Forte","Muito forte","Sobre-humano","Tit√¢nico"];
const VELOCIDADES = ["Lento","Normal","R√°pido","Muito r√°pido","Rel√¢mpago"];

// ordem padr√£o (pode embaralhar em Op√ß√µes)
let CATEGORIAS = [
  { key: "Ra√ßa", options: RACAS },
  { key: "Altura", options: ALTURAS },
  { key: "Durabilidade", options: DURABILIDADES },
  { key: "For√ßa", options: FORCAS },
  { key: "Velocidade", options: VELOCIDADES },
  { key: "Poder", options: PODERES },
  { key: "Origem", options: ORIGENS },
  { key: "Personalidade", options: PERSONALIDADES },
  { key: "Motiva√ß√£o", options: MOTIVACOES },
  { key: "Escala de Poder", options: ESCALA_PODER },
];

/*******************
 * ESTADO DA APP   *
 *******************/
let history = loadHistory();      // personagens salvos
let currentIndex = 0;             // √≠ndice da categoria atual
let fichaAtual = {};              // ficha em constru√ß√£o
let spinning = false;             // est√° girando?
let autoMode = false;             // gira sequ√™ncia sozinho?

/*******************
 * ELEMENTOS       *
 *******************/
const wheel = $("#wheel");
const wctx  = wheel.getContext("2d");
const confettiCanvas = $("#confetti");
const cctx = confettiCanvas.getContext("2d");

const categoriaTitulo = $("#categoria-titulo");
const fichaList = $("#ficha-list");
const finalCard = $("#final-card");
const btnSpin = $("#btn-spin");
const btnReset = $("#btn-reset");
const autoToggle = $("#autoToggle");

const tabButtons = $$(".tab");
const viewRoleta = $("#view-roleta");
const viewHistorico = $("#view-historico");
const viewOpcoes = $("#view-opcoes");

const histGrid = $("#hist-grid");
const btnExport = $("#btn-export");
const btnClear = $("#btn-clear");
const fileImport = $("#file-import");

const ordemList = $("#ordem-list");
const btnShuffle = $("#btn-shuffle");

const themeSelect = $("#themeSelect");
const btnShare = $("#btn-share");
const btnNew = $("#btn-new");

const sfxSpin = $("#sfx-spin");
const sfxDing = $("#sfx-ding");

/*******************
 * NAVEGA√á√ÉO       *
 *******************/
tabButtons.forEach(btn=>{
  btn.addEventListener("click", ()=>{
    tabButtons.forEach(b=>b.classList.remove("active"));
    btn.classList.add("active");
    const route = btn.dataset.route;
    showRoute(route);
  });
});
function showRoute(route){
  [viewRoleta, viewHistorico, viewOpcoes].forEach(v=>v.classList.remove("active"));
  if(route==="roleta"){ viewRoleta.classList.add("active"); }
  if(route==="historico"){ viewHistorico.classList.add("active"); renderHistorico(); }
  if(route==="opcoes"){ viewOpcoes.classList.add("active"); renderOpcoes(); }
}
// ===== Tema =====
const THEME_KEY = "roleta_theme_v1";
function applyTheme(theme){
  document.body.classList.remove("theme-medieval","theme-neon");
  if(theme === "medieval") document.body.classList.add("theme-medieval");
  if(theme === "neon") document.body.classList.add("theme-neon");
  localStorage.setItem(THEME_KEY, theme);
  themeSelect.value = theme;
}
themeSelect.addEventListener("change", e => applyTheme(e.target.value));
applyTheme(localStorage.getItem(THEME_KEY) || "default");

/*******************
 * DESENHO DA ROLETA
 *******************/
let angle = 0; // √¢ngulo atual (graus)
function drawWheel(options){
  const size = wheel.width;
  const cx = size/2, cy = size/2;
  const outer = size/2 - 10;
  const inner = 60;
  const n = options.length;
  const step = 360 / n;

  // fundo
  wctx.clearRect(0,0,size,size);

  // glow externo
  const grd = wctx.createRadialGradient(cx, cy, inner, cx, cy, outer);
  grd.addColorStop(0, "#0f1c3b");
  grd.addColorStop(1, "#0a1227");
  wctx.fillStyle = grd;
  wctx.beginPath();
  wctx.arc(cx, cy, outer, 0, Math.PI*2);
  wctx.fill();

  // setores
  for(let i=0;i<n;i++){
    const start = (angle + i*step) * Math.PI/180;
    const end   = (angle + (i+1)*step) * Math.PI/180;

    wctx.beginPath();
    wctx.moveTo(cx, cy);
    wctx.arc(cx, cy, outer, start, end);
    wctx.closePath();

    wctx.fillStyle = i%2===0 ? "#7c3aed" : "#22c55e";
    wctx.fill();
    wctx.lineWidth = 2;
    wctx.strokeStyle = "#0b1020";
    wctx.stroke();

    // texto
    const mid = (start + end)/2;
    const tx = cx + Math.cos(mid) * (outer - 50);
    const ty = cy + Math.sin(mid) * (outer - 50);
    const label = options[i];

    wctx.save();
    wctx.translate(tx, ty);
    wctx.rotate(mid);
    wctx.fillStyle = "#0b1020";
    wctx.font = "14px sans-serif";
    const tw = wctx.measureText(label).width;
    wctx.fillText(label, -tw/2, 4);
    wctx.restore();
  }

  // aro
  wctx.beginPath();
  wctx.arc(cx, cy, outer, 0, Math.PI*2);
  wctx.lineWidth = 6;
  wctx.strokeStyle = "#0d1530";
  wctx.stroke();

  // miolo
  const radial = wctx.createRadialGradient(cx, cy, 0, cx, cy, inner);
  radial.addColorStop(0, "#ffd54a");
  radial.addColorStop(1, "#a970ff");
  wctx.beginPath();
  wctx.arc(cx, cy, inner, 0, Math.PI*2);
  wctx.fillStyle = radial;
  wctx.fill();

  // brilho no miolo
  wctx.beginPath();
  wctx.arc(cx-12, cy-12, 10, 0, Math.PI*2);
  wctx.fillStyle = "#ffffff99";
  wctx.fill();
}

/*******************
 * ANIMA√á√ÉO SPIN   *
 *******************/
function spinOnce(options, onEnd){
  if (spinning) return;
  spinning = true;
  btnSpin.disabled = true;

  // üîä SOM: iniciar som de giro
  try { if (sfxSpin) { sfxSpin.currentTime = 0; sfxSpin.play(); } } catch {}

  const n = options.length;
  const step = 360 / n;

  // rota√ß√£o total entre 3 e 6 voltas + deslocamento aleat√≥rio
  const total = rand(3,6)*360 + rand(0,359);
  const startTime = performance.now();
  const dur = rand(1800, 2600);

  function frame(now){
    const t = clamp(now - startTime, 0, dur);
    const eased = easeOutCubic(t, 0, total, dur);
    // atualiza √¢ngulo (n√£o deixa crescer infinito)
    angle = (angle + (eased - (angle % 360))) % 360;

    drawWheel(options);

    if (t >= dur) {
      // √¢ngulo final
      angle = (angle + total) % 360;
      drawWheel(options);

      // √≠ndice selecionado: pointer est√° no topo ( -90¬∞ )
      // ajuste: transformar √¢ngulo para posi√ß√£o relativa ao topo
      const pos = (angle + 90) % 360; // o que est√° sob o ponteiro
      // √≠ndice ‚Äúvisual‚Äù (onde parou)
      const indexVisual = Math.floor((360 - pos) / step) % n;

      // √≠ndice ‚Äúreal‚Äù com pesos (se houver)
      const cat = CATEGORIAS[currentIndex];
      const pesosDaCat = PESOS[cat.key];
      const indexPeso = pesosDaCat ? weightedIndex(cat.options, pesosDaCat) : indexVisual;

      // usamos o indexPeso como resultado final,
      // mas mantemos a anima√ß√£o visual como est√° (indexVisual)
      const index = indexPeso;

      // üîî SOM: parar som de giro e tocar ding
      try { if (sfxSpin) { sfxSpin.pause(); sfxSpin.currentTime = 0; } } catch {}
      try { if (sfxDing) { sfxDing.currentTime = 0; sfxDing.play(); } } catch {}

      spinning = false;
      btnSpin.disabled = false;
      onEnd(index);
      return;
    }
    requestAnimationFrame(frame);
  }
  requestAnimationFrame(frame);
}


/*******************
 * FICHA E FLUXO   *
 *******************/
function renderFicha(){
  fichaList.innerHTML = "";
  CATEGORIAS.forEach((cat, i)=>{
    const li = document.createElement("li");
    if(i===currentIndex) li.classList.add("live");
    const left = document.createElement("span"); left.textContent = cat.key;
    const right = document.createElement("span");
    right.textContent = fichaAtual[cat.key] ?? (i<currentIndex ? "‚Äî" : "‚Ä¶");
    li.append(left,right);
    fichaList.appendChild(li);
  });
}

function startCategory(){
  finalCard.classList.add("hidden");
  const cat = CATEGORIAS[currentIndex];
  categoriaTitulo.textContent = `Roleta ‚Äî ${cat.key}`;
  drawWheel(cat.options);
  renderFicha();
}

function nextCategory(){
  if(currentIndex < CATEGORIAS.length - 1){
    currentIndex++;
    startCategory();
    if(autoMode) setTimeout(()=>btnSpin.click(), 500);
  } else {
    // terminou personagem
    showFinalCard();
    saveToHistory({ ...fichaAtual, __createdAt: Date.now() });
    fireConfetti();
    // prepara pr√≥xima rodada
    fichaAtual = {};
    currentIndex = 0;
    startCategory();
  }
}

function showFinalCard(){
  finalCard.innerHTML = `<h3>‚úÖ Personagem Gerado</h3>` +
    `<ul class="ficha">` +
    CATEGORIAS.map(c=>`<li><span>${c.key}</span><span>${fichaAtual[c.key]}</span></li>`).join("") +
    `</ul>`;
  finalCard.classList.remove("hidden");
}

/*******************
 * HIST√ìRICO       *
 *******************/
function loadHistory(){
  try{
    const raw = localStorage.getItem(STORAGE_KEY);
    return raw ? JSON.parse(raw) : [];
  }catch{ return []; }
}
function saveHistory(){
  localStorage.setItem(STORAGE_KEY, JSON.stringify(history));
}
function saveToHistory(char){
  history = [char, ...history];
  saveHistory();
}
function renderHistorico(){
  histGrid.innerHTML = "";
  if(history.length === 0){
    histGrid.innerHTML = `<p class="hint">Nenhum personagem salvo ainda. Gere alguns na p√°gina da Roleta.</p>`;
    return;
  }
  history.forEach((char, i)=>{
    const card = document.createElement("div");
    card.className = "card";
    card.innerHTML = `
      <h4>Personagem #${history.length - i}</h4>
      <time>${new Date(char.__createdAt).toLocaleString()}</time>
      <ul>
        ${Object.entries(char).filter(([k])=>!k.startsWith("__")).map(([k,v])=>`<li><strong>${k}:</strong> ${v}</li>`).join("")}
      </ul>
    `;
    histGrid.appendChild(card);
  });
}
btnExport.addEventListener("click", ()=>{
  const blob = new Blob([JSON.stringify(history, null, 2)], {type:"application/json"});
  const url = URL.createObjectURL(blob);
  const a = document.createElement("a");
  a.href = url; a.download = `historico_personagens_${Date.now()}.json`;
  document.body.appendChild(a); a.click(); a.remove();
  URL.revokeObjectURL(url);
});
btnClear.addEventListener("click", ()=>{
  if(confirm("Tem certeza que deseja limpar TODO o hist√≥rico?")){
    history = []; saveHistory(); renderHistorico();
  }
});
fileImport.addEventListener("change", (e)=>{
  const f = e.target.files?.[0]; if(!f) return;
  const reader = new FileReader();
  reader.onload = ()=>{
    try{
      const data = JSON.parse(reader.result);
      if(Array.isArray(data)){ history = data; saveHistory(); renderHistorico(); }
      else alert("Arquivo inv√°lido.");
    }catch{ alert("Falha ao ler JSON."); }
  };
  reader.readAsText(f);
});

/*******************
 * OP√á√ïES          *
 *******************/
function renderOpcoes(){
  ordemList.innerHTML = CATEGORIAS.map(c=>`<li>${c.key}</li>`).join("");
}
btnShuffle.addEventListener("click", ()=>{
  for(let i=CATEGORIAS.length-1;i>0;i--){
    const j = Math.floor(Math.random()*(i+1));
    [CATEGORIAS[i], CATEGORIAS[j]] = [CATEGORIAS[j], CATEGORIAS[i]];
  }
  renderOpcoes();
  // se estiver na roleta, recome√ßa a sequ√™ncia
  if(viewRoleta.classList.contains("active")){
    currentIndex = 0; fichaAtual = {}; startCategory();
  }
});

/*******************
 * CONTROLES       *
 *******************/
btnSpin.addEventListener("click", ()=>{
  if(spinning) return;
  const cat = CATEGORIAS[currentIndex];
  spinOnce(cat.options, (idx)=>{
    const val = cat.options[idx];
    fichaAtual[cat.key] = val;
    renderFicha();
    setTimeout(nextCategory, 650);
  });
});
btnReset.addEventListener("click", ()=>{
  if(spinning) return;
  fichaAtual = {}; currentIndex = 0; startCategory();
  finalCard.classList.add("hidden");
});
autoToggle.addEventListener("change", (e)=>{ autoMode = e.target.checked; });

btnShare.addEventListener("click", async ()=>{
  // se tiver um cart√£o final mostrando o √∫ltimo, usa ele; sen√£o, usa fichaAtual
  const base = Object.keys(fichaAtual).length ? fichaAtual : history[0];
  if(!base){ alert("Gere um personagem primeiro."); return; }

  const linhas = CATEGORIAS.map(c => `${c.key}: ${base[c.key] ?? "-"}`).join("\n");
  const texto = `üé≤ Meu Personagem:\n${linhas}\n‚Äî Gerado na Roleta √âpica`;

  if(navigator.share){
    try{ await navigator.share({ title: "Roleta √âpica", text: texto }); }
    catch{}
  } else {
    await navigator.clipboard.writeText(texto);
    alert("Ficha copiada! Cole onde quiser (WhatsApp, etc.)");
  }
});

btnNew.addEventListener("click", ()=>{
  if(spinning) return;
  fichaAtual = {}; currentIndex = 0; startCategory();
  finalCard.classList.add("hidden");
  if(autoMode) setTimeout(()=>btnSpin.click(), 400);
});

/*******************
 * CONFETTI         *
 *******************/
function fireConfetti(){
  const W = confettiCanvas.width = window.innerWidth;
  const H = confettiCanvas.height = window.innerHeight;
  const N = 160;
  const parts = Array.from({length:N}).map(()=>({
    x: Math.random()*W, y: -20, r: rand(4,8),
    c: ["#ffd54a","#7c3aed","#22c55e","#38bdf8","#ef4444"][rand(0,4)],
    vx: (Math.random()-.5)*2, vy: rand(2,5), a: Math.random()*360, va: rand(-6,6)
  }));
  let t0 = performance.now(), dur = 2200;

  function frame(now){
    const t = now - t0;
    cctx.clearRect(0,0,W,H);
    parts.forEach(p=>{
      p.x += p.vx; p.y += p.vy; p.a += p.va;
      cctx.save();
      cctx.translate(p.x, p.y);
      cctx.rotate(p.a * Math.PI/180);
      cctx.fillStyle = p.c;
      cctx.fillRect(-p.r/2, -p.r/2, p.r, p.r);
      cctx.restore();
    });
    if(t < dur) requestAnimationFrame(frame);
    else cctx.clearRect(0,0,W,H);
  }
  requestAnimationFrame(frame);
}

/*******************
 * BOOT            *
 *******************/
function boot(){
  // rota inicial
  showRoute("roleta");
  // inicializa roleta
  startCategory();
  // primeira render do hist√≥rico/ops para j√° existir estrutura ao trocar
  renderHistorico();
  renderOpcoes();
}

boot();




